generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Publisher {
  id                BigInt         @id @default(autoincrement())
  uuid              String         @unique @db.VarChar
  userId            BigInt         @default(0)
  name              String         @db.VarChar
  description       String?        @db.VarChar
  websiteUrl        String?        @db.VarChar
  facebookUsername  String?        @db.VarChar
  instagramUsername String?        @db.VarChar
  twitterUsername   String?        @db.VarChar
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  logo              PublisherLogo?
  authors           Author[]
}

model PublisherLogo {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @unique @db.VarChar
  userId      BigInt    @default(0)
  publisher   Publisher @relation(fields: [publisherId], references: [id])
  publisherId BigInt    @unique
  blurhash    String?   @db.VarChar
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Author {
  id                          BigInt                       @id @default(autoincrement())
  uuid                        String                       @unique @db.VarChar
  userId                      BigInt                       @default(0)
  publisher                   Publisher?                   @relation(fields: [publisherId], references: [id])
  publisherId                 BigInt?
  firstName                   String?                      @db.VarChar
  lastName                    String?                      @db.VarChar
  websiteUrl                  String?                      @db.VarChar
  facebookUsername            String?                      @db.VarChar
  instagramUsername           String?                      @db.VarChar
  twitterUsername             String?                      @db.VarChar
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @default(now()) @updatedAt
  profileImage                AuthorProfileImage?
  bios                        AuthorBio[]
  storeBookCollections        StoreBookCollection[]
  storeBookSeries             StoreBookSeries[]
  standardEbooksAuthorMapping StandardEbooksAuthorMapping?
}

model AuthorProfileImage {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @db.VarChar
  userId    BigInt   @default(0)
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  BigInt   @unique
  blurhash  String?  @db.VarChar
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AuthorBio {
  id        BigInt   @id @default(autoincrement())
  uuid      String   @unique @db.VarChar
  userId    BigInt   @default(0)
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  BigInt
  bio       String   @db.VarChar
  language  String   @db.VarChar
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model StoreBookCollection {
  id         BigInt                    @id @default(autoincrement())
  uuid       String                    @unique @db.VarChar
  userId     BigInt                    @default(0)
  author     Author                    @relation(fields: [authorId], references: [id])
  authorId   BigInt
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @default(now()) @updatedAt
  names      StoreBookCollectionName[]
  storeBooks StoreBook[]
}

model StoreBookCollectionName {
  id           BigInt              @id @default(autoincrement())
  uuid         String              @unique @db.VarChar
  userId       BigInt              @default(0)
  collection   StoreBookCollection @relation(fields: [collectionId], references: [id])
  collectionId BigInt
  name         String              @db.VarChar
  language     String              @db.VarChar
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @default(now()) @updatedAt
}

model StoreBookSeries {
  id         BigInt      @id @default(autoincrement())
  uuid       String      @unique @db.VarChar
  userId     BigInt      @default(0)
  author     Author      @relation(fields: [authorId], references: [id])
  authorId   BigInt
  name       String      @db.VarChar
  language   String      @db.VarChar
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  storeBooks StoreBook[]
}

model StoreBook {
  id                             BigInt                          @id @default(autoincrement())
  uuid                           String                          @unique @db.VarChar
  userId                         BigInt                          @default(0)
  collection                     StoreBookCollection             @relation(fields: [collectionId], references: [id])
  collectionId                   BigInt
  language                       String                          @db.VarChar
  status                         String?                         @db.VarChar
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @default(now()) @updatedAt
  releases                       StoreBookRelease[]
  series                         StoreBookSeries[]
  standardEbooksStoreBookMapping StandardEbooksStoreBookMapping?
}

model StoreBookRelease {
  id           BigInt          @id @default(autoincrement())
  uuid         String          @unique @db.VarChar
  userId       BigInt          @default(0)
  storeBook    StoreBook       @relation(fields: [storeBookId], references: [id])
  storeBookId  BigInt
  releaseName  String?         @db.VarChar
  releaseNotes String?         @db.VarChar
  publishedAt  DateTime?       @db.Timestamp(6)
  title        String?         @db.VarChar
  description  String?         @db.VarChar
  price        Int?            @default(0)
  isbn         String?         @db.VarChar
  status       String?         @default("unpublished") @db.VarChar
  cover        StoreBookCover? @relation(fields: [coverId], references: [id])
  coverId      BigInt?
  file         StoreBookFile?  @relation(fields: [fileId], references: [id])
  fileId       BigInt?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt
  categories   Category[]
}

model StoreBookCover {
  id          BigInt             @id @default(autoincrement())
  uuid        String             @unique @db.VarChar
  userId      BigInt             @default(0)
  releases    StoreBookRelease[]
  aspectRatio String?            @db.VarChar
  blurhash    String?            @db.VarChar
  createdAt   DateTime           @default(now())
}

model StoreBookFile {
  id        BigInt             @id @default(autoincrement())
  uuid      String             @unique @db.VarChar
  userId    BigInt             @default(0)
  releases  StoreBookRelease[]
  fileName  String?            @db.VarChar
  createdAt DateTime           @default(now())
}

model Category {
  id        BigInt             @id @default(autoincrement())
  uuid      String             @unique @db.VarChar
  userId    BigInt             @default(0)
  key       String             @db.VarChar
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  names     CategoryName[]
  releases  StoreBookRelease[]
}

model CategoryName {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique @db.VarChar
  userId     BigInt   @default(0)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId BigInt
  name       String   @db.VarChar
  language   String   @db.VarChar
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model StandardEbooksAuthorMapping {
  id        BigInt   @id @default(autoincrement())
  url       String
  author    Author   @relation(fields: [authorId], references: [id])
  authorId  BigInt   @unique
  createdAt DateTime @default(now())
}

model StandardEbooksStoreBookMapping {
  id          BigInt    @id @default(autoincrement())
  url         String
  storeBook   StoreBook @relation(fields: [storeBookId], references: [id])
  storeBookId BigInt    @unique
  createdAt   DateTime  @default(now())
}
